import { jsonSafeParse, normalizeHttpResponse } from '@middy/util';
const defaults = {
    logger: console.error,
    fallbackMessage: undefined
};
const httpErrorHandlerMiddleware = (opts = {})=>{
    const options = {
        ...defaults,
        ...opts
    };
    const httpErrorHandlerMiddlewareOnError = async (request)=>{
        if (request.response !== undefined) return;
        if (typeof options.logger === 'function') {
            options.logger(request.error);
        }
        if (request.error.statusCode && request.error.expose === undefined) {
            request.error.expose = request.error.statusCode < 500;
        }
        if (!request.error.expose || !request.error.statusCode) {
            request.error = {
                statusCode: 500,
                message: options.fallbackMessage,
                expose: true
            };
        }
        if (request.error.expose) {
            normalizeHttpResponse(request);
            const { statusCode, message, headers } = request.error;
            request.response = {
                ...request.response,
                statusCode,
                headers: {
                    ...request.response.headers,
                    ...headers
                }
            };
            if (message) {
                const headerContentType = typeof jsonSafeParse(message) === 'string' ? 'text/plain' : 'application/json';
                request.response.body = message;
                request.response.headers['Content-Type'] = headerContentType;
            }
        }
    };
    return {
        onError: httpErrorHandlerMiddlewareOnError
    };
};
export default httpErrorHandlerMiddleware;

